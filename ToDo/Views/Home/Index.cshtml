@{
    ViewBag.Title = "Home Page";
}
<link href="~/Content/style.css" rel="stylesheet" />
<style>

</style>



<div class="statusContainer">
    <div class="list js-toDo" draggable="true">
        <div class="list-header js-list-header non-empty clearfix editable">
            ToDo
        </div>
        <div class="list-cards fancy-scrollbar clearfix js-list-cards js-sortable ui-sortable">

        </div>
        <a href="#" class="open-card-composer js-open-card-composer">Add a card…</a>
    </div>
    <div class="list js-InProgress" draggable="true">
        <div class="list-header js-list-header non-empty clearfix editable">
            In Progress
        </div>
        <div class="list-cards fancy-scrollbar clearfix js-list-cards js-sortable ui-sortable">

        </div>
        <a href="#" class="open-card-composer js-open-card-composer">Add a card…</a>
    </div>
    <div class="list js-Done" draggable="true">
        <div class="list-header js-list-header non-empty clearfix editable">
            Done
        </div>
        <div class="list-cards fancy-scrollbar clearfix js-list-cards js-sortable ui-sortable">

        </div>
        <a href="#" class="open-card-composer js-open-card-composer">Add a card…</a>
    </div>
</div>

<div id="container">

</div>

<script type="text/template" id="assignUserTemplate">
    <li class="js-user">
        <span class="js-userName"></span>
        <span class="icon-cancel"></span>
    </li>
</script>

@section scripts
{
    <script type="text/template" id="cardTemplate">
        <div class="list-card-details clearfix">
            <a class="list-card-title clear js-card-name">
                {0}
            </a>
            <div class="badges"></div>
            <div class="list-card-members js-list-card-members"></div>
        </div>
    </script>


    <script type="text/template" id="createCardTemplate">
        <div class="card-composer">
            <div class="list-card js-composer" style="padding-bottom: 0px;">
                <div class="list-card-labels clearfix js-list-card-composer-labels"></div>
                <textarea class="list-card-composer-textarea js-card-title"></textarea>
                <div class="list-card-members js-list-card-composer-members"></div>
            </div>
            <div class="cc-controls clearfix">
                <input type="submit" value="Add" class="primary confirm js-add-card"> <a href="#" class="icon-lg icon-close dark-hover js-cancel"></a>
                <a href="#" class="cc-opt icon-lg icon-menu dark-hover js-cc-menu"></a>
            </div>
        </div>
    </script>

    <script>

        // Full example
        $(function () {
            var id = 'statusContainer';

            var cols = document.querySelectorAll('.' + id + ' .list');
            var dragSrcEl = null;

            function handleDragStart(e) {
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);
                dragSrcEl = this;
                // this/e.target is the source node.
                this.addClassName('moving');
            };
            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault(); // Allows us to drop.
                }
                e.dataTransfer.dropEffect = 'move';
                return false;
            };
            function handleDragEnter(e) {
                this.addClassName('over');
            };
            function handleDragLeave(e) {
                // this/e.target is previous target element.
                this.removeClassName('over');
            };
            function handleDrop(e) {
                // this/e.target is current target element.
                if (e.stopPropagation) {
                    e.stopPropagation(); // stops the browser from redirecting.
                }
                // Don't do anything if we're dropping on the same column we're dragging.
                if (dragSrcEl != this) {
                    dragSrcEl.innerHTML = this.innerHTML;
                    this.innerHTML = e.dataTransfer.getData('text/html');
                    // Set number of times the column has been moved.
                    var count = this.querySelector('.count');
                    var newCount = parseInt(count.getAttribute('data-col-moves')) + 1;
                    count.setAttribute('data-col-moves', newCount);
                    count.textContent = 'moves: ' + newCount;
                }
                return false;
            };
            function handleDragEnd(e) {
                // this/e.target is the source node.
                [].forEach.call(cols, function (col) {
                    col.removeClassName('over');
                    col.removeClassName('moving');
                });
            };


            [].forEach.call(cols, function (col) {
                //col.setAttribute('draggable', 'true'); // Enable columns to be draggable.
                col.addEventListener('dragstart', handleDragStart, false);
                col.addEventListener('dragenter', handleDragEnter, false);
                col.addEventListener('dragover', handleDragOver, false);
                col.addEventListener('dragleave', handleDragLeave, false);
                col.addEventListener('drop', handleDrop, false);
                col.addEventListener('dragend', handleDragEnd, false);
            });
        });

        $(function () {
            $('.open-card-composer').on('click', function () {

                var link = $(this);
                var parent = link.parent();

                $(this)
                    .parent('.list')
                    .find('.list-cards')
                    .append($('#createCardTemplate').html());

                $(this).hide();
                $('.js-add-card', parent).on('click', function () {
                    var cardValue = $('.js-composer textarea', parent).val();

                    if (!cardValue) return;

                    var cardTemplate = $('#cardTemplate').html().format(cardValue);
                    $('.list-cards', parent).append(cardTemplate);

                    $('.card-composer', parent).remove();
                    link.show();
                });
                $('.js-cancel', parent).on('click', function () {
                    $('.card-composer', parent).remove();
                    link.show();
                });
            });

            Array.prototype.where = function (searchField, searchCriteria) {
                var x = [];

                for (var i = 0; i < this.length; i++) {

                }

                for (var z in this) {
                    if (z[searchField] == searchCriteria) {
                        x.push(z);
                    }
                }
                return x;
            };

            String.prototype.format = function () {
                var args = arguments;
                return this.replace(/{(\d+)}/g, function (match, number) {
                    return typeof args[number] != 'undefined'
                        ? args[number]
                        : match;
                });
            };

            var cards = [
                { id: 0, name: 'name1', type: 'bug', status: 0 },
                { id: 1, name: 'name2', type: 'task', status: 0 },
                { id: 2, name: 'name3', type: 'bug', status: 1 },
                { id: 3, name: 'name4', type: 'task', status: 1 },
                { id: 4, name: 'name5', type: 'bug', status: 2 },
                { id: 5, name: 'name6', type: 'task', status: 2 }
            ];


            //var cardTemplate = $("#cardTemplate").html();


            //var template = cardTemplate.format("http://example.com", "Link Title");


            //$("#container").append(template);

            var toDoList = cards.where('status', 0);
            console.log(toDoList);
        });
    </script>
}
